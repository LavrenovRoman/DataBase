execute ibeblock (
  ProcessInserts boolean = TRUE,
  ProcessUpdates boolean = TRUE,
  ProcessDeletes boolean = TRUE)
returns (
  InsertedRecs integer = 0 comment 'Records inserted',
  UpdatedRecs integer = 0 comment 'Records updated',
  DeletedRecs integer = 0 comment 'Records deleted',
  TotalTime double precision = 0 comment 'Time spent (seconds)')
as
begin
  RecNum = 5000;  -- How many records will be inserted into our test table

  ibec_Progress('Creating connections...');
  -- If databases do exist already we will not try to create them.
  -- Of course, this way doesn't fit for remote databases
  if (not ibec_fileexists('c:\MasterDB.fdb')) then
    create database 'localhost:c:\MasterDB.fdb' user 'SYSDBA' password 'masterkey'
    page_size 4096 sql_dialect 3
    -- CLIENTLIB isn't mandatory if you're using standard gds32.dll
    clientlib 'C:\Program Files\Firebird\bin\fbclient.dll';

  if (not ibec_fileexists('c:\SubscriberDB.fdb')) then
    create database 'localhost:c:\SubscriberDB.fdb' user 'SYSDBA' password 'masterkey'
    page_size 4096 sql_dialect 3
    clientlib 'C:\Program Files\Firebird\bin\fbclient.dll';


  -- Creating two named connections to our databases...
  create connection MasterDB dbname 'localhost:c:\MasterDB.fdb'
  password 'masterkey' user 'SYSDBA'
  clientlib 'C:\Program Files\Firebird\bin\fbclient.dll';

  create connection SubscriberDB dbname 'localhost:c:\SubscriberDB.fdb'
  password 'masterkey' user 'SYSDBA'
  sql_dialect 3
  clientlib 'C:\Program Files\Firebird\bin\fbclient.dll';

  -- We're going to create the IBE$$TEST_DATA table in each database
  -- and populate it with some data
  CreateStmt =
    'create table IBE$$TEST_DATA (
       ID integer not null,
       ID2 varchar(20) not null,
       F_INTEGER integer,
       F_VARCHAR varchar(100),
       F_DATE date,
       F_TIME time,
       F_TIMESTAMP timestamp, 
       F_NUMERIC numeric(15,2),
       F_BOOL char(1) check (F_BOOL in (''T'', ''F'')),
       F_BLOB blob sub_type 1,
       F_SEASON varchar(15) check(F_SEASON in (''Spring'', ''Summer'', ''Autumn'', ''Winter'')))';

  -- IBE$$TEST_DATA will have a primary key consisting of two fields.
  -- Just to show, how to do our job in case when a primary key consists
  -- of more than one field
  AlterStmt =
    'alter table IBE$$TEST_DATA add constraint PK_IBE$$TEST_DATA primary key (ID, ID2)';

  -- First we're working with MasterDB
  use MasterDB;
  -- If IBE$$TEST_DATA doesn't exist in the database we must create it
  if (not exists(select rdb$relation_name from rdb$relations where rdb$relation_name = 'IBE$$TEST_DATA')) then
  begin
    -- Creating the table itself...
    execute statement :CreateStmt;
    -- You must commit DDL-statements explicitly
    commit;
    -- ...and creating a primary key
    execute statement :AlterStmt;
    commit;
  
    -- So, we've just created the table. Now we should populate it with data
    -- We will generate some random data for each field, only
    -- for the first primary key field we will use autoincrement value
    i = 0;
    while (i < RecNum) do
    begin
      fid2    = ibec_randomstring(1,20,65,90);
      fint    = ibec_random2(1, 100000);
      fvarc   = ibec_randomstring(1,100,65,90);
      fdate   = ibec_random2(20000,40000);
      ftime   = ibec_random(0);
      ftimest = ibec_random2(20000,40000) + ibec_random(0);
      fnum    = ibec_random2(1,40000) + ibec_random(0);
      fbool   = ibec_randomval('T','F');
      fblob   = ibec_randomstring(500, 1000, 0, 255);
      fseason = ibec_randomval('Spring', 'Summer', 'Autumn', 'Winter');
  
      insert into IBE$$TEST_DATA values (:i, :fid2, :fint, :fvarc, :fdate, :ftime, :ftimest, :fnum, :fbool, :fblob, :fseason);
      i = i + 1;
  
      -- After each 500 inserted records we will display a progress message.
      -- In SQL Editor it will be displayed on the progress panel above the
      -- Code Editor
      if (ibec_mod(i, 500) = 0) then
      begin
        ibec_progress(i || ' records inserted...');
        -- Don't forget to commit
        commit;
      end
    end
    -- Once more COMMIT. Maybe there are some uncommited INSERTs...
    commit;
  end

  -- Let's work with the second connection...
  use SubscriberDB;
  -- If IBE$$TEST_DATA doesn't exist in the database we must create it
  if (not exists(select rdb$relation_name from rdb$relations where rdb$relation_name = 'IBE$$TEST_DATA')) then
  begin

    execute statement :CreateStmt;
    -- Don't forget to commit each DDL-statement explicitly!
    commit;
    execute statement :AlterStmt;
    commit;
  
    -- Main idea is: we get the data from the first database and insert
    -- it into IBE$$TEST_TABLE in the second database
    use MasterDB;
  
    i = 0;
    k = 0;
    -- FOR ... SELECT will select data from the first database...
    for select * from IBE$$TEST_DATA
    into vals
    do
    begin
      -- ...and we will insert them into the second database
      use SubscriberDB;
      k = k + 1;  -- Just a counter...
      -- So, we should modify some data. In other case we'll have nothing to compare ;)
      if (ibec_mod(k,100) <> 0) then  -- Each hundredth record will be skipped...
      begin
        if (ibec_mod(i,10) = 0) then  -- the 8th field of each tenth record will be changed to NULL...
          vals[7] = null;
        if (ibec_mod(i,30) = 0) then  -- ...and 10th field of each 30th record will be modified...
          vals[9] = ibec_randomstring(500, 1000, 0, 255);
        -- Finally insert a record
        insert into SubscriberDB.IBE$$TEST_DATA values :vals;
        i = i + 1;

        -- After each 500 inserted records we will display a progress message.
        -- Also we commit each 500 INSERTs
        if (ibec_mod(i, 500) = 0) then
        begin
          ibec_progress(i || ' records inserted...');
          commit;
        end
      end
    end
  
    -- Once again COMMIT...
    use SubscriberDB;
    commit;


    -- Now we will insert some more data into the second database
    -- just to have more differences between tables...
    i = k + 1;
    while (i < (RecNum + 1000 + 1)) do
    begin
      fid2    = ibec_randomstring(1,20,65,90);
      fint    = ibec_random2(1, 100000);
      fvarc   = ibec_randomstring(1,100,65,90);
      fdate   = ibec_random2(20000,40000);
      ftime   = ibec_random(0);
      ftimest = ibec_random2(20000,40000) + ibec_random(0);
      fnum    = ibec_random2(1,40000) + ibec_random(0);
      fbool   = ibec_randomval('T','F');
      fblob   = ibec_randomstring(500, 1000, 0, 255);
      fseason = ibec_randomval('Spring', 'Summer', 'Autumn', 'Winter');
  
      insert into IBE$$TEST_DATA values (:i, :fid2, :fint, :fvarc, :fdate, :ftime, :ftimest, :fnum, :fbool, :fblob, :fseason);

      if (ibec_mod(i, 500) = 0) then
      begin
        ibec_progress(i || ' records inserted...');
        commit;
      end
      i = i + 1;
    end
    commit;
  end



  -- So, let's begin to compare data...
  -- Our goal is make the second IBE$$TEST_DATA a full copy of
  -- the first IBE$$TEST_DATA

  -- First of all we should get a primary key of reference table
  use MasterDB;
  i = 0;
  for select i.rdb$field_name
  from rdb$relation_constraints rc, rdb$index_segments i, rdb$indices idx
  where (i.rdb$index_name = rc.rdb$index_name) and
        (idx.rdb$index_name = rc.rdb$index_name) and
        (rc.rdb$constraint_type = 'PRIMARY KEY') and
        (rc.rdb$relation_name = 'IBE$$TEST_DATA')
  order by i.rdb$field_position
  into fldname
  do
  begin
    PKFields[i] = fldname;
    i = i + 1;
  end

  -- Now we need to get a list of remaining fields.
  SelStmt = 'select rdb$field_name
             from rdb$relation_fields
             where (rdb$relation_name = ''IBE$$TEST_DATA'')';

  -- Here we add a condition to exclude primary key fields from select result
  i = 0;
  HighDim = ibec_high(PKFields);
  for i = 0 to HighDim do
    SelStmt = SelStmt || ' and (rdb$field_name <> ''' || ibec_trim(PKFields[i]) || ''')';

  -- We need natural order of fields...
  SelStmt = SelStmt || ' order by rdb$field_position';

  -- Finally execute just created select statement and get
  -- an array of all non-pk fields
  i = 0;
  for execute statement :SelStmt
  into :s
  do
  begin
    -- Trim spaces, we need not them...
    NonPKFields[i] = ibec_trim(:s);
    i = i + 1;
  end


  -- Let's compose necessary statements:
  -- SelStmt will be used to retrieve data
  -- UpdStmt will be used to update the second table if two records differ
  SelStmt = '';
  UpdStmt = 'update ibe$$test_data set ';
  WhereClause = ' where ';

  HighDim = ibec_high(NonPKFields);
  for i = 0 to HighDim do
  begin
    SelStmt = SelStmt || NonPKFields[i];
    SelStmt = SelStmt || ', ';
    UpdStmt = UpdStmt || ibec_chr(13) || NonPKFields[i] || ' = :' || NonPKFields[i];
    if (i < HighDim) then
      UpdStmt = UpdStmt || ', ';
  end

  -- Here we compose a WHERE clause with primary key fields:
  -- WHERE (PK_FIELD1 = :PK_FIELD1) AND (PK_FIELD2 = :PK_FIELD2) AND ...

  HighDim = ibec_high(PKFields);
  for i = 0 to HighDim do
  begin
    SelStmt = SelStmt || ibec_trim(PKFields[i]);
    WhereClause = WhereClause || '(' || ibec_trim(PKFields[i]) || ' = :' || ibec_trim(PKFields[i]) || ')';
    if (i < HighDim) then
    begin
      SelStmt = SelStmt || ', ';
      WhereClause = WhereClause || ' and ';
    end
  end

  SelStmt = 'select ' || SelStmt || ' from IBE$$TEST_DATA order by ';

  for i = 0 to HighDim do
  begin
    SelStmt = SelStmt || ibec_trim(PKFields[i]);
    if (i < HighDim) then
      SelStmt = SelStmt || ', ';
  end

  PKFieldCount = ibec_high(PKFields)+1;
  PKFieldIndex = ibec_high(NonPKFields)+1;

  StartTime = ibec_gettickcount();  -- Note the time...
  
  MasterCR = ibec_cr_OpenCursor(MasterDB, SelStmt);
  SubscriberCR = ibec_cr_OpenCursor(SubscriberDB, SelStmt);

  -- Compose the INSERT statement
  InsFields = ''; InsValues = '';
  FldCount = ibec_cr_FieldCount(SubscriberCR);
  for i = 0 to (FldCount-1) do
  begin
    FldName = ibec_Trim(ibec_cr_FieldName(SubscriberCR, i));
    InsFields = InsFields || FldName;
    InsValues = InsValues || ':' || FldName;
    if (i < (FldCount-1)) then
    begin
      InsFields = InsFields || ', ';
      InsValues = InsValues || ', ';
    end
  end
  InsStmt = 'insert into ibe$$test_data (' || InsFields || ') values (' || InsValues || ')';

  ibec_UseConnection(SubscriberDB);

  while (not (ibec_cr_Eof(MasterCR) and ibec_cr_Eof(SubscriberCR))) do
  begin
    CompResult = 0;
    if (ibec_cr_Eof(MasterCR)) then
      CompResult = 1;
    else if (ibec_cr_Eof(SubscriberCR)) then
      CompResult = -1;
    else
    begin
      ibec_cr_Fetch(MasterCR, MasterPK, PKFieldIndex, PKFieldCount);
      ibec_cr_Fetch(SubscriberCR, SubscriberPK, PKFieldIndex, PKFieldCount);
      CompResult = ibec_CmpRecords2(MasterPK, SubscriberPK);
    end

    if (ProcessUpdates and (CompResult = 0)) then
    begin
      ibec_cr_Fetch(MasterCR, MasterVals, 0, PKFieldIndex);
      ibec_cr_Fetch(SubscriberCR, SubscriberVals, 0, PKFieldIndex);
      CompResult = ibec_CmpRecords(MasterVals, SubscriberVals);
      if (CompResult <> 0) then
      begin
        UpdatedRecs = UpdatedRecs + 1;
        ibec_progress('Record must be updated... ' || '(ID=' || SubscriberPK['ID'] ||
                      '; ID2=' || SubscriberPK['ID2'] || ')');
        ibec_cr_Fetch(MasterCR, MasterVals, 0, null);
        execute statement :UpdStmt || WhereClause values :MasterVals;
      end

      ibec_cr_Next(MasterCR);
      ibec_cr_Next(SubscriberCR);
    end
    else if (ProcessInserts and (CompResult < 0)) then
    begin
      -- Redundant master record found
      -- Insert it into the subscriber
      InsertedRecs = InsertedRecs + 1;
      ibec_progress('Record must be inserted... ' || '(ID=' || SubscriberPK['ID'] ||
                      '; ID2=' || MasterPK['ID2'] || ')');
      ibec_cr_Fetch(MasterCR, MasterVals, 0, null);
      execute statement :InsStmt values :MasterVals;
      ibec_cr_Next(MasterCR);
    end 
    else if (ProcessDeletes and (CompResult > 0)) then
    begin
      -- Redundant subscriber record found
      -- Delete it.
      DeletedRecs = DeletedRecs + 1;
      ibec_progress('Record must be deleted... ' || '(ID=' || SubscriberPK['ID'] ||
                      '; ID2=' || SubscriberPK['ID2'] || ')');
      ibec_cr_Fetch(SubscriberCR, SubscriberPK, PKFieldIndex, PKFieldCount);
      execute statement 'delete from ibe$$test_data ' || WhereClause values :SubscriberPK;
      ibec_cr_Next(SubscriberCR);
    end;
  end
  
  ibec_cr_CloseCursor(MasterCR);
  ibec_cr_CloseCursor(SubscriberCR);

  commit;
  -- Done. Close both connections
  close connection MasterDB;
  close connection SubscriberDB;

  -- Let's count elapsed time...
  EndTime = ibec_gettickcount();
  TotalTime =  (EndTime - StartTime) / 1000;
  suspend;
end
